name: Problems-Deploy

on:
  workflow_call:
    inputs:
      env:
        type: string
        required: true
      force:
        type: boolean
        default: false
      problems-branch:
        type: string
        default: master
  workflow_dispatch:
    inputs:
      env:
        type: string
        default: dev
        description: environment of deploy
      force:
        type: boolean
        default: false
        description: force upload
      problems-branch:
        type: string
        default: master
        description: branch of library-checker-problems

concurrency:
  group: ${{ inputs.env }}-problems-deploy
  cancel-in-progress: true

env:
  TF_CLOUD_ORGANIZATION: "yosupo06-org"
  TF_WORKSPACE: "${{ inputs.env }}-library-checker"  

jobs:
  problems-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: yosupo06/library-checker-problems
          path: library-checker-problems
          ref: ${{ inputs.problems-branch }}
      - run: pip3 install -r ./library-checker-problems/requirements.txt

      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init
        working-directory: ./terraform
      - id: tf-output
        run: terraform output --json
        working-directory: ./terraform

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ fromJson(steps.tf-output.outputs.stdout).gh_provider_id.value }}
          service_account: ${{ fromJson(steps.tf-output.outputs.stdout).uploader_sa_email.value }}
          token_format: access_token

      - run: ./api/gen_protoc.sh

      - id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v1
        with:
          secrets: |-
            minio-secret:${{ inputs.env }}-library-checker-project/storage-hmac-key/latest
            discord-webhook:${{ inputs.env }}-library-checker-project/discord-announcement-webhook/latest

      - id: build-uploader
        name: Build Uploader
        working-directory: ./uploader
        run: go build .

      - id: download-cloud-sql-proxy
        working-directory: ./uploader
        run: |
          curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.1.2/cloud-sql-proxy.linux.amd64
          chmod +x ./cloud-sql-proxy

      - id: deploy-problems
        name: Deploy Problems
        working-directory: ./uploader
        run: >
          ./cloud-sql-proxy --auto-iam-authn ${{ fromJson(steps.tf-output.outputs.stdout).main_db_connection_name.value }} &
          python3 upload.py
        env:
          PG_USER: "${{ fromJson(steps.tf-output.outputs.stdout).uploader_sa_db_name.value }}"
          PG_TABLE: librarychecker
          MINIO_HOST: storage.googleapis.com
          MINIO_ID: "${{ fromJson(steps.tf-output.outputs.stdout).storage_hmac_id.value }}"
          MINIO_SECRET: "${{ steps.secrets.outputs.minio-secret }}"
          MINIO_BUCKET: "${{ fromJson(steps.tf-output.outputs.stdout).private_bucket_name.value }}"
          MINIO_PUBLIC_BUCKET: "${{ fromJson(steps.tf-output.outputs.stdout).public_bucket_name.value }}"
          DISCORD_WEBHOOK: "${{ steps.secrets.outputs.discord-webhook }}"
          FORCE_UPLOAD: "${{ inputs.force }}" 
