// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	FirebaseAuthScopes = "firebaseAuth.Scopes"
)

// Defines values for SolvedStatus.
const (
	AC       SolvedStatus = "AC"
	LATESTAC SolvedStatus = "LATEST_AC"
	UNKNOWN  SolvedStatus = "UNKNOWN"
)

// Defines values for SubmissionOrder.
const (
	MinusId  SubmissionOrder = "-id"
	PlusTime SubmissionOrder = "+time"
)

// ChangeCurrentUserInfoRequest defines model for ChangeCurrentUserInfoRequest.
type ChangeCurrentUserInfoRequest struct {
	User User `json:"user"`
}

// ChangeCurrentUserInfoResponse defines model for ChangeCurrentUserInfoResponse.
type ChangeCurrentUserInfoResponse = map[string]interface{}

// CreateHackRequest defines model for CreateHackRequest.
type CreateHackRequest struct {
	Submission  int32   `json:"submission"`
	TestCaseCpp *[]byte `json:"test_case_cpp,omitempty"`
	TestCaseTxt *[]byte `json:"test_case_txt,omitempty"`
}

// CurrentUserInfoResponse defines model for CurrentUserInfoResponse.
type CurrentUserInfoResponse struct {
	User *User `json:"user,omitempty"`
}

// HackInfoResponse defines model for HackInfoResponse.
type HackInfoResponse struct {
	JudgeOutput *[]byte      `json:"judge_output,omitempty"`
	Overview    HackOverview `json:"overview"`
	Stderr      *[]byte      `json:"stderr,omitempty"`
	TestCaseCpp *[]byte      `json:"test_case_cpp,omitempty"`
	TestCaseTxt *[]byte      `json:"test_case_txt,omitempty"`
}

// HackListResponse defines model for HackListResponse.
type HackListResponse struct {
	Count int32          `json:"count"`
	Hacks []HackOverview `json:"hacks"`
}

// HackOverview defines model for HackOverview.
type HackOverview struct {
	HackTime     time.Time `json:"hack_time"`
	Id           int32     `json:"id"`
	Memory       *int64    `json:"memory,omitempty"`
	Status       string    `json:"status"`
	SubmissionId int32     `json:"submission_id"`
	Time         *float32  `json:"time,omitempty"`
	UserName     *string   `json:"user_name,omitempty"`
}

// HackResponse defines model for HackResponse.
type HackResponse struct {
	Id int32 `json:"id"`
}

// Lang defines model for Lang.
type Lang struct {
	Id      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

// LangListResponse defines model for LangListResponse.
type LangListResponse struct {
	Langs []Lang `json:"langs"`
}

// LibraryUrl Optional URL for the user's library profile. Use an empty string to keep it unset.
type LibraryUrl = string

// Problem defines model for Problem.
type Problem struct {
	// Name Problem identifier consisting of lowercase letters, digits, or underscores.
	Name  ProblemName `json:"name"`
	Title string      `json:"title"`
}

// ProblemCategoriesResponse defines model for ProblemCategoriesResponse.
type ProblemCategoriesResponse struct {
	Categories []ProblemCategory `json:"categories"`
}

// ProblemCategory defines model for ProblemCategory.
type ProblemCategory struct {
	Problems []ProblemName `json:"problems"`
	Title    string        `json:"title"`
}

// ProblemInfoResponse defines model for ProblemInfoResponse.
type ProblemInfoResponse struct {
	OverallVersion string `json:"overall_version"`

	// SourceUrl External reference for the problem statement.
	SourceUrl        string  `json:"source_url"`
	TestcasesVersion string  `json:"testcases_version"`
	TimeLimit        float32 `json:"time_limit"`
	Title            string  `json:"title"`
	Version          string  `json:"version"`
}

// ProblemListResponse defines model for ProblemListResponse.
type ProblemListResponse struct {
	Problems []Problem `json:"problems"`
}

// ProblemName Problem identifier consisting of lowercase letters, digits, or underscores.
type ProblemName = string

// RankingResponse defines model for RankingResponse.
type RankingResponse struct {
	Count      int32            `json:"count"`
	Statistics []UserStatistics `json:"statistics"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	// Name Unique user identifier consisting of letters, digits, hyphen, or underscore.
	Name Username `json:"name"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse = map[string]interface{}

// SolvedStatus Solved status for a problem.
type SolvedStatus string

// SubmissionCaseResult defines model for SubmissionCaseResult.
type SubmissionCaseResult struct {
	Case       string  `json:"case"`
	CheckerOut *[]byte `json:"checker_out,omitempty"`
	Memory     int64   `json:"memory"`
	Status     string  `json:"status"`
	Stderr     *[]byte `json:"stderr,omitempty"`
	Time       float32 `json:"time"`
}

// SubmissionInfoResponse defines model for SubmissionInfoResponse.
type SubmissionInfoResponse struct {
	CanRejudge   bool                    `json:"can_rejudge"`
	CaseResults  *[]SubmissionCaseResult `json:"case_results,omitempty"`
	CompileError *[]byte                 `json:"compile_error,omitempty"`
	Overview     SubmissionOverview      `json:"overview"`
	Source       string                  `json:"source"`
}

// SubmissionListResponse defines model for SubmissionListResponse.
type SubmissionListResponse struct {
	Count       int32                `json:"count"`
	Submissions []SubmissionOverview `json:"submissions"`
}

// SubmissionOrder Sorting order for submissions.
type SubmissionOrder string

// SubmissionOverview defines model for SubmissionOverview.
type SubmissionOverview struct {
	Id             int32      `json:"id"`
	IsLatest       bool       `json:"is_latest"`
	Lang           string     `json:"lang"`
	Memory         int64      `json:"memory"`
	ProblemName    string     `json:"problem_name"`
	ProblemTitle   string     `json:"problem_title"`
	Status         string     `json:"status"`
	SubmissionTime *time.Time `json:"submission_time,omitempty"`
	Time           float32    `json:"time"`
	UserName       *string    `json:"user_name,omitempty"`
}

// SubmitRequest defines model for SubmitRequest.
type SubmitRequest struct {
	Lang string `json:"lang"`

	// Problem Problem identifier consisting of lowercase letters, digits, or underscores.
	Problem ProblemName `json:"problem"`

	// Source Source code to judge (max 1 MiB).
	Source      string `json:"source"`
	TleKnockout *bool  `json:"tle_knockout,omitempty"`
}

// SubmitResponse defines model for SubmitResponse.
type SubmitResponse struct {
	Id int32 `json:"id"`
}

// User defines model for User.
type User struct {
	IsDeveloper bool `json:"is_developer"`

	// LibraryUrl Optional URL for the user's library profile. Use an empty string to keep it unset.
	LibraryUrl LibraryUrl `json:"library_url"`

	// Name Unique user identifier consisting of letters, digits, hyphen, or underscore.
	Name Username `json:"name"`
}

// UserInfoResponse defines model for UserInfoResponse.
type UserInfoResponse struct {
	User User `json:"user"`
}

// UserSolvedStatisticsResponse defines model for UserSolvedStatisticsResponse.
type UserSolvedStatisticsResponse struct {
	SolvedMap map[string]SolvedStatus `json:"solved_map"`
}

// UserStatistics defines model for UserStatistics.
type UserStatistics struct {
	Count int32 `json:"count"`

	// Name Unique user identifier consisting of letters, digits, hyphen, or underscore.
	Name Username `json:"name"`
}

// Username Unique user identifier consisting of letters, digits, hyphen, or underscore.
type Username = string

// HackId defines model for HackId.
type HackId = int32

// HackLimit defines model for HackLimit.
type HackLimit = int32

// HackSkip defines model for HackSkip.
type HackSkip = int32

// RankingLimit defines model for RankingLimit.
type RankingLimit = int32

// RankingSkip defines model for RankingSkip.
type RankingSkip = int32

// SubmissionId defines model for SubmissionId.
type SubmissionId = int32

// SubmissionLimit defines model for SubmissionLimit.
type SubmissionLimit = int32

// SubmissionSkip defines model for SubmissionSkip.
type SubmissionSkip = int32

// UserNamePath Unique user identifier consisting of letters, digits, hyphen, or underscore.
type UserNamePath = Username

// GetHackListParams defines parameters for GetHackList.
type GetHackListParams struct {
	// Skip Number of hacks to skip before collecting results.
	Skip *HackSkip `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of hacks to return (1-1000).
	Limit  *HackLimit `form:"limit,omitempty" json:"limit,omitempty"`
	User   *string    `form:"user,omitempty" json:"user,omitempty"`
	Status *string    `form:"status,omitempty" json:"status,omitempty"`
	Order  *string    `form:"order,omitempty" json:"order,omitempty"`
}

// GetRankingParams defines parameters for GetRanking.
type GetRankingParams struct {
	// Skip Number of ranking records to skip before collecting results.
	Skip *RankingSkip `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of ranking records to return (1-1000).
	Limit *RankingLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSubmissionListParams defines parameters for GetSubmissionList.
type GetSubmissionListParams struct {
	// Skip Number of submissions to skip before collecting results.
	Skip *SubmissionSkip `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of submissions to return (1-1000).
	Limit     *SubmissionLimit `form:"limit,omitempty" json:"limit,omitempty"`
	Problem   *ProblemName     `form:"problem,omitempty" json:"problem,omitempty"`
	Status    *string          `form:"status,omitempty" json:"status,omitempty"`
	Hacked    *bool            `form:"hacked,omitempty" json:"hacked,omitempty"`
	User      *Username        `form:"user,omitempty" json:"user,omitempty"`
	DedupUser *bool            `form:"dedupUser,omitempty" json:"dedupUser,omitempty"`
	Lang      *string          `form:"lang,omitempty" json:"lang,omitempty"`
	Order     *SubmissionOrder `form:"order,omitempty" json:"order,omitempty"`
}

// PatchCurrentUserInfoJSONRequestBody defines body for PatchCurrentUserInfo for application/json ContentType.
type PatchCurrentUserInfoJSONRequestBody = ChangeCurrentUserInfoRequest

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterRequest

// PostHackJSONRequestBody defines body for PostHack for application/json ContentType.
type PostHackJSONRequestBody = CreateHackRequest

// PostSubmitJSONRequestBody defines body for PostSubmit for application/json ContentType.
type PostSubmitJSONRequestBody = SubmitRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get current user info
	// (GET /auth/current_user)
	GetCurrentUserInfo(w http.ResponseWriter, r *http.Request)
	// Change current user info
	// (PATCH /auth/current_user)
	PatchCurrentUserInfo(w http.ResponseWriter, r *http.Request)
	// Register user
	// (POST /auth/register)
	PostRegister(w http.ResponseWriter, r *http.Request)
	// Get problem categories
	// (GET /categories)
	GetProblemCategories(w http.ResponseWriter, r *http.Request)
	// List hacks
	// (GET /hacks)
	GetHackList(w http.ResponseWriter, r *http.Request, params GetHackListParams)
	// Submit hack test case
	// (POST /hacks)
	PostHack(w http.ResponseWriter, r *http.Request)
	// Get hack info
	// (GET /hacks/{id})
	GetHackInfo(w http.ResponseWriter, r *http.Request, id HackId)
	// Get language list
	// (GET /langs)
	GetLangList(w http.ResponseWriter, r *http.Request)
	// Get problems
	// (GET /problems)
	GetProblems(w http.ResponseWriter, r *http.Request)
	// Get problem info
	// (GET /problems/{name})
	GetProblemInfo(w http.ResponseWriter, r *http.Request, name ProblemName)
	// Get ranking
	// (GET /ranking)
	GetRanking(w http.ResponseWriter, r *http.Request, params GetRankingParams)
	// Get submissions list
	// (GET /submissions)
	GetSubmissionList(w http.ResponseWriter, r *http.Request, params GetSubmissionListParams)
	// Get submission info
	// (GET /submissions/{id})
	GetSubmissionInfo(w http.ResponseWriter, r *http.Request, id SubmissionId)
	// Submit a solution
	// (POST /submit)
	PostSubmit(w http.ResponseWriter, r *http.Request)
	// Get user info
	// (GET /users/{name})
	GetUserInfo(w http.ResponseWriter, r *http.Request, name UserNamePath)
	// Get user solved statistics
	// (GET /users/{name}/statistics)
	GetUserStatistics(w http.ResponseWriter, r *http.Request, name UserNamePath)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get current user info
// (GET /auth/current_user)
func (_ Unimplemented) GetCurrentUserInfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change current user info
// (PATCH /auth/current_user)
func (_ Unimplemented) PatchCurrentUserInfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register user
// (POST /auth/register)
func (_ Unimplemented) PostRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get problem categories
// (GET /categories)
func (_ Unimplemented) GetProblemCategories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List hacks
// (GET /hacks)
func (_ Unimplemented) GetHackList(w http.ResponseWriter, r *http.Request, params GetHackListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit hack test case
// (POST /hacks)
func (_ Unimplemented) PostHack(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get hack info
// (GET /hacks/{id})
func (_ Unimplemented) GetHackInfo(w http.ResponseWriter, r *http.Request, id HackId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get language list
// (GET /langs)
func (_ Unimplemented) GetLangList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get problems
// (GET /problems)
func (_ Unimplemented) GetProblems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get problem info
// (GET /problems/{name})
func (_ Unimplemented) GetProblemInfo(w http.ResponseWriter, r *http.Request, name ProblemName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get ranking
// (GET /ranking)
func (_ Unimplemented) GetRanking(w http.ResponseWriter, r *http.Request, params GetRankingParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get submissions list
// (GET /submissions)
func (_ Unimplemented) GetSubmissionList(w http.ResponseWriter, r *http.Request, params GetSubmissionListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get submission info
// (GET /submissions/{id})
func (_ Unimplemented) GetSubmissionInfo(w http.ResponseWriter, r *http.Request, id SubmissionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit a solution
// (POST /submit)
func (_ Unimplemented) PostSubmit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user info
// (GET /users/{name})
func (_ Unimplemented) GetUserInfo(w http.ResponseWriter, r *http.Request, name UserNamePath) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user solved statistics
// (GET /users/{name}/statistics)
func (_ Unimplemented) GetUserStatistics(w http.ResponseWriter, r *http.Request, name UserNamePath) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCurrentUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUserInfo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUserInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchCurrentUserInfo operation middleware
func (siw *ServerInterfaceWrapper) PatchCurrentUserInfo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, FirebaseAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchCurrentUserInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, FirebaseAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProblemCategories operation middleware
func (siw *ServerInterfaceWrapper) GetProblemCategories(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblemCategories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHackList operation middleware
func (siw *ServerInterfaceWrapper) GetHackList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHackListParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHackList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostHack operation middleware
func (siw *ServerInterfaceWrapper) PostHack(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, FirebaseAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostHack(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHackInfo operation middleware
func (siw *ServerInterfaceWrapper) GetHackInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id HackId

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHackInfo(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLangList operation middleware
func (siw *ServerInterfaceWrapper) GetLangList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLangList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProblems operation middleware
func (siw *ServerInterfaceWrapper) GetProblems(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProblemInfo operation middleware
func (siw *ServerInterfaceWrapper) GetProblemInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name ProblemName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblemInfo(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRanking operation middleware
func (siw *ServerInterfaceWrapper) GetRanking(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRanking(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubmissionList operation middleware
func (siw *ServerInterfaceWrapper) GetSubmissionList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubmissionListParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "problem" -------------

	err = runtime.BindQueryParameter("form", true, false, "problem", r.URL.Query(), &params.Problem)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "problem", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "hacked" -------------

	err = runtime.BindQueryParameter("form", true, false, "hacked", r.URL.Query(), &params.Hacked)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hacked", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "dedupUser" -------------

	err = runtime.BindQueryParameter("form", true, false, "dedupUser", r.URL.Query(), &params.DedupUser)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dedupUser", Err: err})
		return
	}

	// ------------- Optional query parameter "lang" -------------

	err = runtime.BindQueryParameter("form", true, false, "lang", r.URL.Query(), &params.Lang)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lang", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubmissionList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubmissionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetSubmissionInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SubmissionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubmissionInfo(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSubmit operation middleware
func (siw *ServerInterfaceWrapper) PostSubmit(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, FirebaseAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSubmit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name UserNamePath

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserStatistics operation middleware
func (siw *ServerInterfaceWrapper) GetUserStatistics(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name UserNamePath

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserStatistics(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/current_user", wrapper.GetCurrentUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/auth/current_user", wrapper.PatchCurrentUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.PostRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/categories", wrapper.GetProblemCategories)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/hacks", wrapper.GetHackList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/hacks", wrapper.PostHack)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/hacks/{id}", wrapper.GetHackInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/langs", wrapper.GetLangList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/problems", wrapper.GetProblems)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/problems/{name}", wrapper.GetProblemInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ranking", wrapper.GetRanking)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/submissions", wrapper.GetSubmissionList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/submissions/{id}", wrapper.GetSubmissionInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/submit", wrapper.PostSubmit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{name}", wrapper.GetUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{name}/statistics", wrapper.GetUserStatistics)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Gikec67NcAfP8O5+9/8AAAD///hnLAGYOQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
