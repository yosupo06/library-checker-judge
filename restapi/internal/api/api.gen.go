// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ChangeCurrentUserInfoRequest defines model for ChangeCurrentUserInfoRequest.
type ChangeCurrentUserInfoRequest struct {
	User User `json:"user"`
}

// ChangeCurrentUserInfoResponse defines model for ChangeCurrentUserInfoResponse.
type ChangeCurrentUserInfoResponse = map[string]interface{}

// ChangeUserInfoRequest defines model for ChangeUserInfoRequest.
type ChangeUserInfoRequest struct {
	User User `json:"user"`
}

// ChangeUserInfoResponse defines model for ChangeUserInfoResponse.
type ChangeUserInfoResponse = map[string]interface{}

// CurrentUserInfoResponse defines model for CurrentUserInfoResponse.
type CurrentUserInfoResponse struct {
	User *User `json:"user,omitempty"`
}

// Lang defines model for Lang.
type Lang struct {
	Id      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

// LangListResponse defines model for LangListResponse.
type LangListResponse struct {
	Langs []Lang `json:"langs"`
}

// Problem defines model for Problem.
type Problem struct {
	Name  string `json:"name"`
	Title string `json:"title"`
}

// ProblemCategoriesResponse defines model for ProblemCategoriesResponse.
type ProblemCategoriesResponse struct {
	Categories []ProblemCategory `json:"categories"`
}

// ProblemCategory defines model for ProblemCategory.
type ProblemCategory struct {
	Problems []string `json:"problems"`
	Title    string   `json:"title"`
}

// ProblemInfoResponse defines model for ProblemInfoResponse.
type ProblemInfoResponse struct {
	OverallVersion   string  `json:"overall_version"`
	SourceUrl        string  `json:"source_url"`
	TestcasesVersion string  `json:"testcases_version"`
	TimeLimit        float32 `json:"time_limit"`
	Title            string  `json:"title"`
	Version          string  `json:"version"`
}

// ProblemListResponse defines model for ProblemListResponse.
type ProblemListResponse struct {
	Problems []Problem `json:"problems"`
}

// RankingResponse defines model for RankingResponse.
type RankingResponse struct {
	Count      int32            `json:"count"`
	Statistics []UserStatistics `json:"statistics"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Name string `json:"name"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse = map[string]interface{}

// SubmissionCaseResult defines model for SubmissionCaseResult.
type SubmissionCaseResult struct {
	Case       string  `json:"case"`
	CheckerOut *[]byte `json:"checker_out,omitempty"`
	Memory     int64   `json:"memory"`
	Status     string  `json:"status"`
	Stderr     *[]byte `json:"stderr,omitempty"`
	Time       float32 `json:"time"`
}

// SubmissionInfoResponse defines model for SubmissionInfoResponse.
type SubmissionInfoResponse struct {
	CanRejudge   bool                    `json:"can_rejudge"`
	CaseResults  *[]SubmissionCaseResult `json:"case_results,omitempty"`
	CompileError *[]byte                 `json:"compile_error,omitempty"`
	Overview     SubmissionOverview      `json:"overview"`
	Source       string                  `json:"source"`
}

// SubmissionListResponse defines model for SubmissionListResponse.
type SubmissionListResponse struct {
	Count       int32                `json:"count"`
	Submissions []SubmissionOverview `json:"submissions"`
}

// SubmissionOverview defines model for SubmissionOverview.
type SubmissionOverview struct {
	Id             int32      `json:"id"`
	IsLatest       bool       `json:"is_latest"`
	Lang           string     `json:"lang"`
	Memory         int64      `json:"memory"`
	ProblemName    string     `json:"problem_name"`
	ProblemTitle   string     `json:"problem_title"`
	Status         string     `json:"status"`
	SubmissionTime *time.Time `json:"submission_time,omitempty"`
	Time           float32    `json:"time"`
	UserName       *string    `json:"user_name,omitempty"`
}

// SubmitRequest defines model for SubmitRequest.
type SubmitRequest struct {
	Lang        string `json:"lang"`
	Problem     string `json:"problem"`
	Source      string `json:"source"`
	TleKnockout *bool  `json:"tle_knockout,omitempty"`
}

// SubmitResponse defines model for SubmitResponse.
type SubmitResponse struct {
	Id int32 `json:"id"`
}

// User defines model for User.
type User struct {
	IsDeveloper bool   `json:"is_developer"`
	LibraryUrl  string `json:"library_url"`
	Name        string `json:"name"`
}

// UserInfoResponse defines model for UserInfoResponse.
type UserInfoResponse struct {
	SolvedMap map[string]string `json:"solved_map"`
	User      User              `json:"user"`
}

// UserStatistics defines model for UserStatistics.
type UserStatistics struct {
	Count int32  `json:"count"`
	Name  string `json:"name"`
}

// GetRankingParams defines parameters for GetRanking.
type GetRankingParams struct {
	Skip  *int32 `form:"skip,omitempty" json:"skip,omitempty"`
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSubmissionListParams defines parameters for GetSubmissionList.
type GetSubmissionListParams struct {
	Skip      *int32  `form:"skip,omitempty" json:"skip,omitempty"`
	Limit     *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Problem   *string `form:"problem,omitempty" json:"problem,omitempty"`
	Status    *string `form:"status,omitempty" json:"status,omitempty"`
	Hacked    *bool   `form:"hacked,omitempty" json:"hacked,omitempty"`
	User      *string `form:"user,omitempty" json:"user,omitempty"`
	DedupUser *bool   `form:"dedupUser,omitempty" json:"dedupUser,omitempty"`
	Lang      *string `form:"lang,omitempty" json:"lang,omitempty"`
	Order     *string `form:"order,omitempty" json:"order,omitempty"`
}

// PatchCurrentUserInfoJSONRequestBody defines body for PatchCurrentUserInfo for application/json ContentType.
type PatchCurrentUserInfoJSONRequestBody = ChangeCurrentUserInfoRequest

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterRequest

// PostSubmitJSONRequestBody defines body for PostSubmit for application/json ContentType.
type PostSubmitJSONRequestBody = SubmitRequest

// PatchUserInfoJSONRequestBody defines body for PatchUserInfo for application/json ContentType.
type PatchUserInfoJSONRequestBody = ChangeUserInfoRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get current user info
	// (GET /auth/current_user)
	GetCurrentUserInfo(w http.ResponseWriter, r *http.Request)
	// Change current user info
	// (PATCH /auth/current_user)
	PatchCurrentUserInfo(w http.ResponseWriter, r *http.Request)
	// Register user
	// (POST /auth/register)
	PostRegister(w http.ResponseWriter, r *http.Request)
	// Get problem categories
	// (GET /categories)
	GetProblemCategories(w http.ResponseWriter, r *http.Request)
	// Get language list
	// (GET /langs)
	GetLangList(w http.ResponseWriter, r *http.Request)
	// Get problems
	// (GET /problems)
	GetProblems(w http.ResponseWriter, r *http.Request)
	// Get problem info
	// (GET /problems/{name})
	GetProblemInfo(w http.ResponseWriter, r *http.Request, name string)
	// Get ranking
	// (GET /ranking)
	GetRanking(w http.ResponseWriter, r *http.Request, params GetRankingParams)
	// Get submissions list
	// (GET /submissions)
	GetSubmissionList(w http.ResponseWriter, r *http.Request, params GetSubmissionListParams)
	// Get submission info
	// (GET /submissions/{id})
	GetSubmissionInfo(w http.ResponseWriter, r *http.Request, id int32)
	// Submit a solution
	// (POST /submit)
	PostSubmit(w http.ResponseWriter, r *http.Request)
	// Get user info
	// (GET /users/{name})
	GetUserInfo(w http.ResponseWriter, r *http.Request, name string)
	// Change user info (self only)
	// (PATCH /users/{name})
	PatchUserInfo(w http.ResponseWriter, r *http.Request, name string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get current user info
// (GET /auth/current_user)
func (_ Unimplemented) GetCurrentUserInfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change current user info
// (PATCH /auth/current_user)
func (_ Unimplemented) PatchCurrentUserInfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register user
// (POST /auth/register)
func (_ Unimplemented) PostRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get problem categories
// (GET /categories)
func (_ Unimplemented) GetProblemCategories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get language list
// (GET /langs)
func (_ Unimplemented) GetLangList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get problems
// (GET /problems)
func (_ Unimplemented) GetProblems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get problem info
// (GET /problems/{name})
func (_ Unimplemented) GetProblemInfo(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get ranking
// (GET /ranking)
func (_ Unimplemented) GetRanking(w http.ResponseWriter, r *http.Request, params GetRankingParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get submissions list
// (GET /submissions)
func (_ Unimplemented) GetSubmissionList(w http.ResponseWriter, r *http.Request, params GetSubmissionListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get submission info
// (GET /submissions/{id})
func (_ Unimplemented) GetSubmissionInfo(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit a solution
// (POST /submit)
func (_ Unimplemented) PostSubmit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user info
// (GET /users/{name})
func (_ Unimplemented) GetUserInfo(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change user info (self only)
// (PATCH /users/{name})
func (_ Unimplemented) PatchUserInfo(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCurrentUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUserInfo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUserInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchCurrentUserInfo operation middleware
func (siw *ServerInterfaceWrapper) PatchCurrentUserInfo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchCurrentUserInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProblemCategories operation middleware
func (siw *ServerInterfaceWrapper) GetProblemCategories(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblemCategories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLangList operation middleware
func (siw *ServerInterfaceWrapper) GetLangList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLangList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProblems operation middleware
func (siw *ServerInterfaceWrapper) GetProblems(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProblemInfo operation middleware
func (siw *ServerInterfaceWrapper) GetProblemInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblemInfo(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRanking operation middleware
func (siw *ServerInterfaceWrapper) GetRanking(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRanking(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubmissionList operation middleware
func (siw *ServerInterfaceWrapper) GetSubmissionList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubmissionListParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "problem" -------------

	err = runtime.BindQueryParameter("form", true, false, "problem", r.URL.Query(), &params.Problem)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "problem", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "hacked" -------------

	err = runtime.BindQueryParameter("form", true, false, "hacked", r.URL.Query(), &params.Hacked)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hacked", Err: err})
		return
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", r.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Optional query parameter "dedupUser" -------------

	err = runtime.BindQueryParameter("form", true, false, "dedupUser", r.URL.Query(), &params.DedupUser)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dedupUser", Err: err})
		return
	}

	// ------------- Optional query parameter "lang" -------------

	err = runtime.BindQueryParameter("form", true, false, "lang", r.URL.Query(), &params.Lang)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lang", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubmissionList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubmissionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetSubmissionInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubmissionInfo(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSubmit operation middleware
func (siw *ServerInterfaceWrapper) PostSubmit(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSubmit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUserInfo operation middleware
func (siw *ServerInterfaceWrapper) PatchUserInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUserInfo(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/current_user", wrapper.GetCurrentUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/auth/current_user", wrapper.PatchCurrentUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.PostRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/categories", wrapper.GetProblemCategories)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/langs", wrapper.GetLangList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/problems", wrapper.GetProblems)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/problems/{name}", wrapper.GetProblemInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ranking", wrapper.GetRanking)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/submissions", wrapper.GetSubmissionList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/submissions/{id}", wrapper.GetSubmissionInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/submit", wrapper.PostSubmit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{name}", wrapper.GetUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{name}", wrapper.PatchUserInfo)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6BtdcoMjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
