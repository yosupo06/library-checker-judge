// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Problem defines model for Problem.
type Problem struct {
	Name  string `json:"name"`
	Title string `json:"title"`
}

// ProblemInfoResponse defines model for ProblemInfoResponse.
type ProblemInfoResponse struct {
	OverallVersion   string  `json:"overall_version"`
	SourceUrl        string  `json:"source_url"`
	TestcasesVersion string  `json:"testcases_version"`
	TimeLimit        float32 `json:"time_limit"`
	Title            string  `json:"title"`
	Version          string  `json:"version"`
}

// ProblemListResponse defines model for ProblemListResponse.
type ProblemListResponse struct {
	Problems []Problem `json:"problems"`
}

// RankingResponse defines model for RankingResponse.
type RankingResponse struct {
	Count      int32            `json:"count"`
	Statistics []UserStatistics `json:"statistics"`
}

// UserStatistics defines model for UserStatistics.
type UserStatistics struct {
	Count int32  `json:"count"`
	Name  string `json:"name"`
}

// GetRankingParams defines parameters for GetRanking.
type GetRankingParams struct {
	Skip  *int32 `form:"skip,omitempty" json:"skip,omitempty"`
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get problems
	// (GET /problems)
	GetProblems(w http.ResponseWriter, r *http.Request)
	// Get problem info
	// (GET /problems/{name})
	GetProblemInfo(w http.ResponseWriter, r *http.Request, name string)
	// Get ranking
	// (GET /ranking)
	GetRanking(w http.ResponseWriter, r *http.Request, params GetRankingParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get problems
// (GET /problems)
func (_ Unimplemented) GetProblems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get problem info
// (GET /problems/{name})
func (_ Unimplemented) GetProblemInfo(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get ranking
// (GET /ranking)
func (_ Unimplemented) GetRanking(w http.ResponseWriter, r *http.Request, params GetRankingParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetProblems operation middleware
func (siw *ServerInterfaceWrapper) GetProblems(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProblemInfo operation middleware
func (siw *ServerInterfaceWrapper) GetProblemInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblemInfo(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRanking operation middleware
func (siw *ServerInterfaceWrapper) GetRanking(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRanking(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/problems", wrapper.GetProblems)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/problems/{name}", wrapper.GetProblemInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ranking", wrapper.GetRanking)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7SVT2vbTBDGv4qZ9z20ICwluelWSimhgYakPYUQ1vLYmUT7J7OjgDH67mV3Lct2JMel",
	"5OSFHc0+z++ZXa+hstpZg0Y8lGvw1SNqFZfXbGc16rB0bB2yEMYNozSGX1k5hBK8MJkltBkIST2002bA",
	"+NIQ4xzKu/R9V32fddV29oSVhD6bky/Nwt6gd9Z4fKvCviKrun54RfZkzaAgbxuu8KHhelgveqmUR3+0",
	"iZDGh5o0SdheWNZKoIRFbZXAVr1p9Az5GIUMxk85IJRa7Onf09G3GjKRvWFzBPIVeRmH7FJRXJNsFv8z",
	"LqCE//J+dPLN3OTd0LTbExWzWr1xuG08JO1GmWcyy3FZlW3Mfhpk5OK8T4OM4DLF4UUJeaHqdBO/PfJt",
	"/9l7XnZOyDbShlwddP0nUyNXcPiijUkK5WQWNjZKQwtXNGPFq8nXR6yekSc3325/Tb5cX04+aTKkVf15",
	"Z/hKKKZn0yIIsg6NcgQlXEyL6QVk4JQ8Rl/57hAtMVoMvpWQNZdzKOE7ynVXExyk2GP9eVEkNkYw0VHO",
	"1VTFj/Mnn25TCu7E2dyb+Ahhjr5icpI8/fwRQfpGa8WrJG+y9RC2to7ydUDcnmAsvGURCiuNguyhvFsD",
	"hfMCKOgi7TLrYxRuMNtxeBj5/ccT23uI/5LYJE5YpMbpWh+jtbn5I6ReGuRVj8o/k4NdNHNcqKYWKIvs",
	"/UvUZsNduxd2oO1ZcVLjj0zk8Gk8NY2Ofaz3yK8d2PjfCDm09+2fAAAA//8Bbn4oDAgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
