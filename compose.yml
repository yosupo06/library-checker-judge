services:
  api:
    build:
      dockerfile: Dockerfile.API
    ports:
      - 12380:12380
    depends_on:
      db-init:
        condition: service_completed_successfully
      create-minio-bucket:
        condition: service_completed_successfully
    environment:
      - API_DB_LOG=true
      - PGHOST=db
      - FIREBASE_AUTH_EMULATOR_HOST=firebase:9099
    healthcheck:
        test: wget -q -O - localhost:12380/health || exit 1
        timeout: 10s
        interval: 1s
        retries: 30

  api-rest:
    build:
      dockerfile: Dockerfile.APIREST
    ports:
      - 12381:12381
    depends_on:
      db-init:
        condition: service_completed_successfully
      create-minio-bucket:
        condition: service_completed_successfully
    environment:
      - API_DB_LOG=true
      - PGHOST=db
      - FIREBASE_AUTH_EMULATOR_HOST=firebase:9099
    healthcheck:
      test: wget -q -O - localhost:12381/health || exit 1
      timeout: 10s
      interval: 1s
      retries: 30

  db:
    image: postgres:11.3
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=librarychecker
      - POSTGRES_PASSWORD=lcdummypassword
    healthcheck:
        test: [ "CMD", "pg_isready", "-q", "-d", "librarychecker", "-U", "postgres" ]
        timeout: 10s
        interval: 1s
        retries: 30
  db-init:
    build:
      dockerfile: Dockerfile.MIGRATOR
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PGHOST=db

  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    command: server /data --console-address :9001
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=miniopass
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 1s
      timeout: 1s
      retries: 10
  create-minio-bucket:
    image: minio/mc:RELEASE.2025-05-21T01-59-54Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minio miniopass;
      /usr/bin/mc rm --recursive --force myminio/testcase;
      /usr/bin/mc rm --recursive --force myminio/testcase-public;
      /usr/bin/mc mb myminio/testcase;
      /usr/bin/mc mb myminio/testcase-public;
      /usr/bin/mc policy download myminio/testcase;
      /usr/bin/mc policy download myminio/testcase-public;
      /usr/bin/mc anonymous set public myminio/testcase-public;
      exit 0;
      "

  firebase:
    build:
      dockerfile: firebase/Dockerfile
    ports:
      - 4000:4000
      - 9099:9099
      - 8085:8085
    volumes:
      - ./firebase/firebase.json:/opt/firebase/firebase.json
    working_dir: /opt/firebase
    command: firebase emulators:start --project dev-library-checker-project
    tty: true

  # Build language images used by judge (runs each `up` after a `down`).
  # This service exits successfully after building, and `judge` depends on it.
  build-langs:
    image: docker:27-cli
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/src
    working_dir: /src/langs
    # Install python3 in the lightweight docker:cli image, then run build.py
    entrypoint: ["/bin/sh","-lc","apk add --no-cache python3 >/dev/null 2>&1 || true; python3 ./build.py"]
    # No restart; this should complete then stop
    restart: "no"

  # Judge worker: polls DB tasks and runs Docker containers for submissions
  judge:
    build:
      dockerfile: Dockerfile.JUDGE
    environment:
      - PGHOST=db
      - PGPORT=5432
      - PGDATABASE=librarychecker
      - PGUSER=postgres
      - PGPASSWORD=lcdummypassword
      - MINIO_HOST=minio:9000
      - MINIO_ID=minio
      - MINIO_SECRET=miniopass
      - MINIO_BUCKET=testcase
      - MINIO_PUBLIC_BUCKET=testcase-public
      - LIBRARY_CHECKER_JUDGE=1
      # Uncomment and set if you need a specific cgroup parent
      # - CGROUP_PARENT=system.slice
    # Needs access to host Docker daemon and cgroup FS for resource metrics
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      # Ensure host and container share the same temp directory so bind mounts work
      - /tmp:/tmp
    depends_on:
      db:
        condition: service_healthy
      create-minio-bucket:
        condition: service_completed_successfully
      api:
        condition: service_healthy
      api-rest:
        condition: service_healthy
      build-langs:
        condition: service_completed_successfully
    restart: unless-stopped
